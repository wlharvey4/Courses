\input texinfo @c -*- texinfo -*-

@c ==================================================
@c NAME:    Algorithmic Design and Techniques
@c VERSION: 2018-08-10 VERSION 0.0.2
@c DESC:    https://www.edx.org/course/algorithmic-design-techniques-uc-san-diegox-algs200x
@c BY:      LOLH
@c NOTES:   
@c ==================================================

@c %**start of header
@c edit
@setfilename algdesigntech.info
@c edit
@settitle Algorithmic Design & Techniques
@c %**end of header

@c ====================
@c texiwebjr specials
@c ====================
@c Changes how xref titles are quoted.
@dquotexrefs

@c Lets braces in index entries work.
@allowindexbraces

@ifclear FORPRINT
@pdflinkcolor
@urllinkcolor
@hideurls
@end ifclear

@c some special symbols
@ifnottex
@macro ii{text}
@i{\text\}
@end macro
@end ifnottex

@c merge the function and variable indexes into the concept index
@c do so without the code font, and in the index entries do the
@c font management ourselves.  Also merge in the chunk definition
@c and reference entries, which jrweave creates for us.
@ifnothtml
@synindex fn cp
@synindex vr cp
@synindex cd cp
@synindex cr cp
@end ifnothtml

@c ====================
@c DOCUMENT CONSTANTS
@c ====================
@set UPDATE-MONTH AUGUST 2018
@set EDITION 0.1
@set AUTHOR LOLH
@set TITLE Algorithmic Design and Techniques
@set SHORTTITLE Algorithmic Design
@set SUBTITLE edX --- UC San Diego X 
@set COPYRIGHT_YEAR 2018
@set COPYRIGHT_HOLDER LOLH

@iftex
@set DOCUMENT book
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@set DRAFT Draft
@end iftex
@ifhtml
@set DOCUMENT Web page
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end ifhtml
@ifinfo
@set DOCUMENT Info file
@set CHAPTER major node
@set APPENDIX major node
@set SECTION minor node
@set SUBSECTION node
@end ifinfo
@ifdocbook
@set DOCUMENT book
@set CHAPTER chapter
@set APPENDIX appendix
@set SECTION section
@set SUBSECTION subsection
@end ifdocbook

@c ====================
@c FINALOUT
@c ====================
@c If "finalout" is commented out, the printed output will show
@c black boxes that mark lines that are too long.  Thus, it is
@c unwise to comment it out when running a master in case there are
@c overfulls which are deemed okay.

@iftex
@c |@finalout|
@end iftex

@c ====================
@c SUMMARY & COPYRIGHT INFORMATION
@c ====================
@copying
@c insert a short summary describing and identifying this document in a
@c sentence or two, and add the copyright notice and copying permisions

This document  is @value{TITLE}
@sp 2
This document  outlines the edX UC  Diego X course on  Algorithmic Design and
Techniques

Copyright @copyright{} @value{COPYRIGHT_YEAR} LOLH @*
by @value{COPYRIGHT_HOLDER} @*
All Rights Reserved

@quotation
Permission is granted to read, study, and enjoy this text.
@end quotation

@sp 2
This is Edition @value{EDITION} of @cite{@value{TITLE}}.

@c use @insertcopying later to 'emit' this copying information in a TeX
@c or plain text document; add to the Top node for use in Info or HTML file
@end copying

@c ====================
@c TITLEPAGE, COPYRIGHT PAGE, TOC PAGE, HEADINGS
@c ====================
@titlepage

@title @value{TITLE}
@subtitle @value{SUBTITLE} --- Edition @value{EDITION} (@value{UPDATE-MONTH})
@c @subtitle Additional Subtitle
@author @value{AUTHOR}

@c place the copyright information on the backside of the titlepage
@c (printed manual only)
@page
@vskip 0pt plus 1filll
@insertcopying

Published by LOLH.

@end titlepage
@c page numbering and headings start after end of titlepage

@iftex
@headings off
@evenheading @thispage @| @value{DRAFT} @| @strong{@value{SHORTTITLE}}
@oddheading  @strong{@thischapter} @| @value{DRAFT} @| @thispage
@end iftex

@c TOC in the printed manual
@c consider placing TOC after the main menu
@c consider including summarycontents here or after main menu
@c @summarycontents
@contents

@c ====================
@c TOP NODE, MASTER MENU
@c ====================
@ifnottex
@ifnotdocbook
@ifnotxml
@node Top
@top Algorithmic Design and Techniques

@c @insertcopying
@end ifnotxml
@end ifnotdocbook
@end ifnottex

@c ====================
@c START OF BODY
@c ====================

@c Preface and Foreward come right after Top node in 'unnumbered' sections
@c consider commenting out Foreward and Preface
@menu

@end menu
@c ====================
@c MAIN BODY NODES
@c ====================

@node Introduction
@unnumbered Introduction to Algorithmic Design and Techniques

@chapheading About This Course

In this course, part of the @cite{Algorithms and Data Structures MicroMasters
program},  you  will  learn  basic   algorithmic  techniques  and  ideas  for
computational problems, which arise in practical applications such as sorting
and searching, divide and conquer, greedy algorithms and dynamic programming.

This course will cover theories, including:

@itemize
@item
how to sort data and how it helps for searching;
@item
how to break a large problem into pieces and solve them recursively;
@item
when it makes sense to proceed greedily;
@item
how dynamic programming is used in genomic studies.
@end itemize

You will  practice solving computational problems,  designing new algorithms,
and  implementing solutions  efficiently (so  that they  run in  less than  a
second).

@heading What you'll learn

@itemize
@item
Essential  algorithmic techniques  - greedy  algorithms, divide  and conquer,
binary search, sorting, dynamic programming
@item
Best practices of implementing algorithms efficiently
@item
Ways of testing and debugging programs
@end itemize

@node Syllabus
@unnumberedsec Syllabus

@heading Module 1: Welcome

Here we will provide an overview  of where algorithms and data structures are
used  (hint:  everywhere) and  walk  you  through  a few  sample  programming
challenges. The programming challenges represent  an important (and often the
most difficult!)  part of this specialization  because the only way  to fully
understand an  algorithm is  to implement it.  Writing correct  and efficient
programs  is hard;  please  don’t be  surprised  if they  don’t  work as  you
planned—our first  programs did  not work  either! We will  help you  on your
journey through  the specialization  by showing how  to implement  your first
programming challenges. We  will also introduce testing  techniques that will
help increase your  chances of passing assignments on your  first attempt. In
case your program does not work as intended, we will show how to fix it, even
if you don’t yet know which test your implementation is failing on.

@heading Module 2: Introduction

In this module you will learn that programs based on efficient algorithms can
solve the same problem billions of  times faster than programs based on naïve
algorithms. You will learn how to estimate  the running time and memory of an
algorithm without even  implementing it. Armed with this  knowledge, you will
be able  to compare various algorithms,  select the most efficient  ones, and
finally implement them as our programming challenges!

@heading Module 3: Greedy Algorithms

In this  module you will  learn about seemingly  naïve yet powerful  class of
algorithms called greedy algorithms. After you will learn the key idea behind
the greedy algorithms, you may feel that they represent the algorithmic Swiss
army knife that can be applied  to solve nearly all programming challenges in
this course. But  be warned: with a  few exceptions that we  will cover, this
intuitive idea rarely works in practice!  For this reason, it is important to
prove  that a  greedy algorithm  always produces  an optimal  solution before
using this algorithm. In the end of  this module, we will test your intuition
and taste for greedy algorithms by offering several programming challenges.

@heading Module 4: Divide-and-Conquer

In this module  you will learn about a powerful  algorithmic technique called
Divide and Conquer. Based on this technique,  you will see how to search huge
databases millions of  times faster than using naïve linear  search. You will
even learn that the standard way to multiply numbers (that you learned in the
grade school)  is far  from the  being the  fastest! We  will then  apply the
divide-and-conquer technique  to design two efficient  algorithms (merge sort
and  quick  sort)  for  sorting  huge   lists,  a  problem  that  finds  many
applications in practice. Finally, we will show that these two algorithms are
optimal, that is, no algorithm can sort faster!

@heading Modules 5 and 6: Dynamic Programming

In  this  final module  of  the  course you  will  learn  about the  powerful
algorithmic technique  for solving many optimization  problems called Dynamic
Programming. It turned  out that dynamic programming can  solve many problems
that  evade all  attempts to  solve them  using greedy  or divide-and-conquer
strategy.  There  are  countless   applications  of  dynamic  programming  in
practice:  from maximizing  the advertisement  revenue  of a  TV station,  to
search  for  similar Internet  pages,  to  gene  finding (the  problem  where
biologists need to find the minimum number of mutations to transform one gene
into another). You  will learn how the same idea  helps to automatically make
spelling corrections and to show the  differences between two versions of the
same text.

@node Instructors
@section Meet the Instructors

@itemize
@item
@strong{Daniel Kane}, Assistant Professor, Computer Science and Engineering &
Dept. of Mathematics UC San Diego.

Daniel is an assistant professor at UCSD with a joint appointment between the
Department  of  Computer  Science  and  Engineering  and  the  Department  of
Mathematics. He holds B.S. from MIT and Ph.D. from Harvard.

Areas of Expertise
@itemize @minus
@item
Theoretical computer science
@item
Combinatorics
@item
Number theory
@end itemize

@item
@strong{Alexander S. Kulikov}, Visiting Professor UC San Diego

Alexander  is  a  research  fellow   at  Steklov  Mathematical  Institute  at
St. Petersburg, Russia and a  visiting professor at University of California,
San  Diego. He  have been  teaching algorithms  classes for  more than  eight
years.

Areas of Expertise
@itemize @minus
@item
Algorithms for NP-hard problems
@item
Circuit complexity
@end itemize

@item
@strong{Michael Levin}, Chief Data Scientist, Yandex.Market

Michael  serves as  chief  data  scientist at  Yandex.Market  (Yandex is  the
leading Internet company in Russia,  and Yandex.Market is the leading service
for  price  comparison  online  shopping  in Russia).  He  has  a  degree  in
mathematics from  Moscow State University.  During his studies Michael  was a
silver and  bronze medalist of  ACM ICPC World Finals  as a member  of Moscow
State University team.

Areas of Expertise
@itemize @minus
@item
Algorithms
@item
Machine Learning & Data Science
@item
Competitive Programming
@end itemize

@item
@strong{Pavel Pevzner}, Ronald R. Taylor Professor of Computer Science, The University
of California, San Diego

Pavel  Pevzner is  Ronald  R. Taylor  Professor of  Computer  Science at  the
University of California,  San Diego. He holds a Ph.D.  from Moscow Institute
of Physics  and Technology, Russia. He  is a Howard Hughes  Medical Institute
Professor  (2006-present),  an  Association for  Computing  Machinery  Fellow
(2010),  and  an  International  Society  for  Computational  Biology  Fellow
(2012).  In  addition  to   Bioinformatics  Algorithms:  An  Active  Learning
Approach, he has  authored the textbooks Computational  Molecular Biology: An
Algorithmic Approach (2000) and  An Introduction to Bioinformatics Algorithms
(2004) (jointly with Neil Jones).

Areas of Expertise
@itemize @minus
@item
Bioinformatics algorithms
@item
Genome rearrangements
@item
DNA sequencing
@item
Computational proteomics
@end itemize

@item
@strong{Neil Rhodes}, Lecturer, UC San Diego

Neil is Lecturer at University of California San Diego (UCSD), formerly Staff
Software Engineer at Google.

Areas of Expertise
@itemize @minus
@item
Algorithms
@item
Software Engineering
@end itemize

@end itemize

@node Challenges
@chapter Programming Challenges

@node Welcome
@section Welcome
@cindex Welcome

@url{https://youtu.be/FWhp-OvZVGY,
Video by David Kane}

@node Programming Challenges
@section Programming Challenges
@cindex Programming Challenges

Welcome to  the first week of  the class! Here  we will walk you  through two
sample  programming  challenges.  The  programming  challenges  represent  an
important (and often the most difficult!) part of this class because the only
way to fully understand an algorithm  is to implement it. Writing correct and
efficient programs is  hard; please don’t be surprised if  they don’t work as
you planned—our first programs did not work  either! We will help you on your
journey through the class by showing  how to implement your first programming
challenges. We will also introduce testing techniques that will help increase
your  chances of  passing assignments  on your  first attempt.  In case  your
program does not  work as intended, we will  show how to fix it,  even if you
don’t yet know which test your implementation is failing on.

The detailed  instructions for solving and  submitting programming challenges
are given  in the first chapter  of the class textbook  available through the
Statements tab on the  course page. You may read it via  your browser as well
as download it as a pdf.

@url{https://courses.edx.org/courses/course-v1:UCSanDiegoX+ALGS200x+2T2017/pdfbook/0/,
Link to Class Textbook}

@node Automated Grading System
@subsection Automated Grading System
@cindex grading system, automated

To introduce you  to our automated grading system, we  will discusstwo simple
programming challenges and walk you  through a step-by-stepprocess of solving
them.  We will encounter several common  pitfalls andwill show you how to fix
them.

Below is a brief overview of what it takes to solve a programming chal-lenge
in five steps:

@table @b
@item Reading problem statement.
The problem statement specifies the  input-output format, the constraints for
the input data as well as time and memory limits. Your goal is to implement a
fast program  that solves the  problem and works  within the time  and memory
limits.
@item Designing an algorithm.
When the problem  statement is clear, start designing an  algorithm and don’t
forget to prove that it works correctly.
@item Implementing an algorithm.
After  you developed  an algorithm,  start implementing  it in  a programming
language of your choice.
@item Testing and debugging your program.
Testing is the art of revealing  bugs.  Debugging is the art of exterminating
the bugs.  When your program is ready,  start testing it!  If a bug is found,
fix it and test again.
@item Submitting your program to the grading system.
After testing  and de-bugging your program,  submit it to the  grading system
and  wait for  the message  ``Good job!''.   In the  case you  see a  different
message, return back to the previous stage.
@end table

@node 1-1 Sum of Two Digits
@section Programming Challenge 1-1: Sum of Two Digits
@cindex Programming Challenge 1-1 Sum of Two Digits
@cindex Sum of Two Digits, Programming Challenge 1-1

@cartouche
@b{Sum of Two Digits Problem}@*
@i{Compute the sum of two single digit numbers.}
@table @b
@item Input:
Two single digit numbers.
@item Output:
The sum of these numbers
@end table
@end cartouche

We start  from this ridiculously simple  problem to show you  the pipeline of
reading  the  problem statement,  designing  an  algorithm, implementing  it,
testing and debugging your program, and submitting it to the grading system.

@heading Reading Problem Statement

@table @b
@item Input format:
Integers @code{a} and @code{b} on the same line (separated by a space).
@item Output format:
The sum of @code{a} and @code{b}.
@item Constraints:
@code{0 @leq a, b @leq 9}.
@item Sample:
@format
Input:
@code{9 7}
Output:
@code{16}
@end format
@item Time limits (sec.):
@multitable {C} {C++} {Java} {Python} {Haskell} {JavaScript} {Scala}
@headitem C @tab C++ @tab Java @tab Python @tab Haskell @tab JavaScript @tab Scala
@item
1 @tab 1 @tab 1.5 @tab 5 @tab 2 @tab 5 @tab 3
@end multitable
@item Memory limit:
512 Mb.
@end table

@node Implementing an Algorithm
@subsection Implementing an Algorithm
@cindex implementing an algorithm

For this  trivial problem, we will  skip ``Designing an algorithm''  step and
will move right to the pseudocode.

@format
@cartouche
@sc{SumOfTwoDigits}(@i{a, b});
return @i{a + b};
@end cartouche
@end format

Since the  pseudocode does not  specify how  we input @code{a}  and @code{b},
below  we provide  solutions in  @emph{C++}, @emph{Java},  and @emph{Python3}
programming languages  as well  as recommendations  on compiling  and running
them.  You can copy-and-paste the code to  a file, compile/run it, test it on
a  few  datasets,  and  then  submit  (the  source  file,  not  the  compiled
executable) to the grading system.  Needless  to say, we assume that you know
the basics of one of programming languages that we use in our grading system.

@node In C++
@subsubsection Sum of Two Digits in C++
@cindex Sum of Two Digits in C++
@cindex Programming Challenge 1-1 in C++

Save  this  to   a  file  (say,  @file{aplusb.cpp}),  compile   it,  run  the
resulting executable, and enter two numbers (on the same line).

@<Challenge Files Hook@>=
APlusB := APlusB
@

@(aplusb.cpp@)=
@<C++ Header: Include IOStream@>
@<Programming Challenge 1-1 SumOfTwoDigits C++@>
@

@<Programming Challenge 1-1 SumOfTwoDigits C++@>=
int main() {
  int a = 0;
  int b = 0;
  std::cin >> a;
  std::cin >> b;
  std::cout << a + b;
  return 0;
}
@

@<C++ Header: Include IOStream@>=
#include <iostream>

@

@node In Java
@subsubsection Sum of Two Digits in Java
@cindex Sum of Two Digits in Java
@cindex Programming Challenge 1-1 in Java

Save  this  to a  file  @file{APlusB.java},  compile  it, run  the  resulting
executable, and enter two numbers (on the same line).

@(APlusB.java@)=
@<Java Import: Scanner@>
@<Programming Challenge 1-1 SumOfTwoDigits Java@>
@

@<Programming Challenge 1-1 SumOfTwoDigits Java@>=
class APlusB {
  public static void main(String [] args) {
    Scanner s = new Scanner(System.in);
    int a = s.nextInt();
    int b = s.nextInt();
    System.out.println(a + b);
  }
}
@

@<Java Import: Scanner@>=
import java.util.Scanner;

@

@<Makefile Challenges Hook@>=
.Phony : ${JAVA_DIR}/${APlusB}.java
${JAVA_DIR}/${APlusB}.java : tangle languages move ${JAVA_DIR} ### TODO ###

.Phony : ${APlusB}.class
${APlusB}.class : ${JAVA_DIR}/${APlusB}.class
${JAVA_DIR}/${APlusB}.class : ${JAVA_DIR}/${APlusB}.java
	javac ${JAVA_DIR}/${APlusB}.java

.Phony : challenge1-1-java
challenge-1-1-java : ${APlusB}.class
	@ cd ${JAVA_DIR} && java ${APlusB}

@

@node In Python3
@subsubsection Sum of Two Digits in Python3
@cindex Sum of Two Digits in Python3
@cindex Programming Challenge 1-1 in Python3

Save this to a file (say, @file{aplusb.py}), run it, and enter two numbers on
the  same line.   To indicate  the end  of input,  press @kbd{ctrl-d/ctrl-z}.
(The  first   line  in   the  code   above  tells   the  grading   system  to
use Python3 rather than Python2).

@(aplusb.py@)=
@<Use Python3@>
@<Python3 Import: Sys@>
@<Programming Challenge 1-1 SumOfTwoDigits Python3@>
@

@<Programming Challenge 1-1 SumOfTwoDigits Python3@>=
input = sys.stdin.read()
tokens = input.split()
a = int(tokens[0])
b = int(tokens[1])
print(a + b)
@

@<Use Python3@>=
Uses python3
@

@<Python3 Import: Sys@>=
import sys

@

@node Challenge 1-2 Maximum Pairwise Product
@section Programming Challenge 1-2: Maximum Pairwise Product
@cindex Programming Challenge 1-2
@cindex Maximum Pairwise Produce, Programming Challenge 1-2

@node Assignment 1-1
@section Assignment 1-1
@cindex Assignment 1-1

@node Warmup
@chapter Algorithmic Warmup
@cindex Warmup

@node Greedy
@chapter Greedy
@cindex Greedy Algorithms

@node Divide and Conquer
@chapter Divide-and-Conquer
@cindex Divide-and-Conquer

@node Dynamic 1
@chapter Dynamic Programming 1
@cindex Dynamic Programming 1

@node Dynamic 2
@chapter Dynamic Programming 2
@cindex Dynamic Programming 2

@node Exam
@chapter Final Exam
@cindex Exam

@c ====================
@c APPENDICES
@c ====================

@node Appendix One
@appendix Appendix One

@node Meta Appendix
@appendix Meta (Makefile) Appendix

@node Makefile Definitions
@appendixsec Makefile Initial Definitions

@(Makefile@)=
@<Makefile Constants@>
@<Makefile Default Targets@>
@<Makefile Tangle@>
@<Makefile Weave@>
@<Makefile Info@>
@<Makefile PDF@>
@<Makefile Clean@>
@<Makefile Dist Clean@>
@<Makefile Directory Creation@>
@<Makefile Move Files@>
@<Makefile Challenges@>
@

@node Makefile Constants
@appendixsubsec Makefile Constant Definitions

@<Makefile Constants@>=
@<Makefile Directory Definitions@>
@<Makefile Filename Definitions@>
@<Makefile Language Files Definitions@>
@<Makefile Garbage Files Definitions@>
@

@node Directory Definitions
@appendixsubsubsec Makefile Directory Definitions

@<Makefile Directory Definitions@>=
PREFIX := .
SOURCE_DIR := ${PREFIX}/src
CHALLENGES_DIR := ${SOURCE_DIR}/challenges
CPLUSPLUS_DIR := ${CHALLENGES_DIR}/c++
JAVA_DIR := ${CHALLENGES_DIR}/java
PYTHON3_DIR := ${CHALLENGES_DIR}/python3

@

@<Makefile Directory Definitions Hook@>=
@

@node Filename Definitions
@appendixsubsubsec Makefile Filename Definitions

@<Makefile Filename Definitions@>=
FILENAME := Algorithmic_Design_and_Techniques
TWJR_FILENAME := ${FILENAME}.twjr
TEXI_FILENAME := ${FILENAME}.texi
INFO_FILENAME := ${FILENAME}.info
PDF_FILENAME  := ${FILENAME}.pdf

@

@node Language Files
@appendixsubsubsec Makefile Language Files Definitions

@<Makefile Language Files Definitions@>=
LANGUAGE_FILES := {cpp,java,py}

@<Challenge Files Hook@>
@

@<Challenge Files Hook@>=
@

@node Garbage Files
@appendixsubsubsec Makefile Garbage Files Definitions

@<Makefile Garbage Files Definitions@>=
GARBAGE := {aux,cp,cps,toc}

@

@node Makefile Default Targets
@appendixsubsec Makefile Default Targets

@<Makefile Default Targets@>=
.Phony : all
all : meta create move clean

.Phony : meta
meta : tangle weave pdf-only

.Phony : move
move : move-challenges-to-source

.Phony : create
create : languages
@

@node Makefile Tangle
@appendixsubsubsec Makefile Tangle

@<Makefile Tangle@>=
.Phony : tangle
tangle :
	jrtangle ${TWJR_FILENAME}

@

@node Makefile Weave
@appendixsubsubsec Meta Weave

@<Makefile Weave@>=
.Phony : weave
weave : ${TEXI_FILENAME}

${TEXI_FILENAME} : ${TWJR_FILENAME}
	jrweave ${TWJR_FILENAME} > ${TEXI_FILENAME}

@

@node Makefile Info
@appendixsubsubsec Makefile Info

@<Makefile Info@>=
.Phony : info
info : ${INFO_FILENAME}

${INFO_FILENAME} : ${TEXI_FILENAME}
	makeinfo ${TEXI_FILENAME}

@

@node Makefile PDF
@appendixsubsubsec Makefile Pdf

@<Makefile PDF@>=
@<Makefile Pdf-Only@>
@<Makefile Pdf-Open@>
@

@<Makefile Pdf-Only@>=
.Phony : pdf-only
pdf-only : ${PDF_FILENAME}
${PDF_FILENAME} : ${TEXI_FILENAME}
	pdftexi2dvi ${TEXI_FILENAME}

@

@<Makefile Pdf-Open@>=
.Phony : pdf-open
.Phony : pdf
pdf-open pdf : pdf-only
	open ${PDF_FILENAME}

@

@node Makefile Clean Targets
@appendixsubsec Makefile Clean Targets

@node Makefile Clean
@appendixsubsubsec Makefile Clean Definition

@<Makefile Clean@>=
.Phony : clean
clean :
	rm -f *~
	rm -f *.${GARBAGE}

@

@node Makefile Dist Clean
@appendixsubsubsec Meta Dist Clean Definition

@<Makefile Dist Clean@>=
.Phony : dist-clean
dist-clean : clean
	rm -f ${FILENAME}.texi
	rm -f *.info
	rm -f *.${LANGUAGE_FILES}
	rm -f ${FILENAME}.{??,???}
	rm -fr ${SOURCE_DIR}

@

@node Makefile Directory Creation
@appendixsubsec Makefile Directory Creation Targets

@<Makefile Directory Creation@>=
.Phony : ${SOURCE_DIR}
${SOURCE_DIR} :
	mkdir -p ${SOURCE_DIR}

.Phony : ${CHALLENGES_DIR}
${CHALLENGES_DIR} : ${SOURCE_DIR}
	mkdir -p ${CHALLENGES_DIR}

.PHONY : languages
languages : ${CHALLENGES_DIR}
	mkdir -p ${CPLUSPLUS_DIR}
	mkdir -p ${JAVA_DIR}
	mkdir -p ${PYTHON3_DIR}

@

@<Makefile Directory Creation Hook@>=
@

@node Makefile Move Targets
@appendixsubsec Makefile Move Targets

The Makefile Move Targets section moves all files into place, starting with
the Move Hook.

@<Makefile Move Files@>=
@<Makefile Move Hook@>
@<Makefile Move Challenges To Source@>
@<Makefile Move JS To Source@>

@

@node Makefile Move Hook
@appendixsubsubsec Makefile Move Hook

Use this hook for moving files to a different directory
than Source; it will execute just prior to the next
code block moving all .js files to Source.

@<Makefile Move Hook@>=
@

@node Make Move Challenges
@appendixsubsubsec Makefile Move Challenges

@<Makefile Move Challenges To Source@>=
.Phony : move-challenges-to-source
move-challenges-to-source : ${CHALLENGES_DIR}
	find ${PREFIX} -depth 1 -name \*.cpp -exec mv {} ${CPLUSPLUS_DIR} \;
	find ${PREFIX} -depth 1 -name \*.java -exec mv {} ${JAVA_DIR} \;
	find ${PREFIX} -depth 1 -name \*.py -exec mv {} ${PYTHON3_DIR} \;
@

@node Makefile Move JS
@appendixsubsubsec Makefile Move JS To Source

@<Makefile Move JS To Source@>=
.Phony : move-js-to-source
move-js-to-source : | ${SOURCE_DIR}
	find ${PREFIX} -depth 1 -name \*.js -exec mv {} ${SOURCE_DIR} \;

@

@node Makefile Challenges
@appendixsubsec Makefile Compile Challenges

@<Makefile Challenges@>=
@<Makefile Challenges Hook@>
@

@node Code Chunk Summaries
@appendix Code Chunk Summaries

This @value{APPENDIX} presents alphabetical lists of
all the file definitions, the code chunk definitions,
and the code chunk references.

@node File Definitions
@appendixsec Source File Definitions

@print_file_defs

@node Code Chunk Definitions
@appendixsec Code Chunk Definitions

@print_code_defs

@node Code Chunk References
@appendixsec Code Chunk References

@print_code_refs

@c ====================
@c BIBLIOGRAPHY; INDEX; END
@c ====================

@node Bibliography
@unnumbered Bibliography

@node Concept Index
@unnumbered Index

@node Index
@unnumbered Index

@printindex cp

@bye

@c ====================
@c TODOs
@c ====================

1. Create a script to fill in named variables
1.1 twjr
1.1.1 init [--dir <directory>]
1.1.2 config
1.1.3 weave [--info --pdf --html --xml --docbook]
1.1.4 tangle [--file <filename>]
